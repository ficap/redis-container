#!/bin/bash
#
# Test the Redis image.
#
# IMAGE_NAME specifies the name of the candidate image used for testing.
# The image has to be available before this script is executed.
#

set -o errexit
set -o nounset
set -x
shopt -s nullglob


test -n "${IMAGE_NAME-}" || false 'make sure $IMAGE_NAME is defined'
test -n "${VERSION-}" || false 'make sure $VERSION is defined'

. test/test-lib.sh

# **Test description**
# Assert container creation fails
# Normal tests without password
# Normal tests with password
# Test with arbitrary uid for the container without password
# Test with arbitrary uid for the container with password
# Test the password change
# Test s2i config file extension
# Test whether documentation is part of the image

TEST_LIST="\
run_container_creation_tests \
run_tests_no_pass \
run_tests_pass_no_root \
run_test_arbitrary_uid_no_pass \
run_test_arbitrary_uid_w_pass \
run_change_password_test \
run_s2i_config_test \
run_doc_test
"

test $# -eq 1 -a "${1-}" == --list && exit 0

CID_FILE_DIR=$(mktemp --suffix=redis_test_cidfiles -d)

TEST_DIR="$(readlink -zf $(dirname "${BASH_SOURCE[0]}"))"
S2I_ARGS="--force-pull=false "

ct_enable_cleanup

function connection_works() {
  local container_ip="$1"; shift
  local password="$1"; shift
  if [ "$(redis_cmd "$container_ip" "$password" ping)" == "PONG" ] ; then
    return 0
  fi
  return 1
}

function redis_cmd() {
  local container_ip="$1"; shift
  local password="$1"; shift
  # if empty password is given, then no password will be specified
  docker run --rm "$IMAGE_NAME" redis-cli -h "$container_ip" ${password:+-a "$password"} "$@"
}

function test_connection() {
  local name=$1 ; shift
  local password=$1 ; shift
  local ip
  ip=$(ct_get_cip $name)
  echo "  Testing Redis connection to $ip (password='${password:-}')..."
  local max_attempts=10
  local sleep_time=2
  local i
  for i in $(seq $max_attempts); do
    echo "    Trying to connect..."
    if connection_works "$ip" "$password" ; then
      echo "  Success!"
      echo
      return 0
    fi
    sleep $sleep_time
  done
  echo "  Giving up: Failed to connect. Logs:"
  docker logs $(ct_get_cid $name)
  return 1
}

function test_redis() {
  local container_ip="$1"
  local password="$2"

  echo "  Testing Redis (password='${password:-}')"
  redis_cmd "$container_ip" "$password" set a 1 >/dev/null
  redis_cmd "$container_ip" "$password" set b 2 >/dev/null
  test "$(redis_cmd "$container_ip" "$password" get b)" == '2'
  echo "  Success!"
  echo
}

# to be replaced with ct_create_container
function create_container() {
  local name=$1 ; shift
  cidfile="$CID_FILE_DIR/$name"
  # create container with a cidfile in a directory for cleanup
  local container_id
  [ "${DEBUG:-0}" -eq 1 ] && echo "DEBUG: docker run ${DOCKER_ARGS:-} --cidfile $cidfile -d \"$@\" $IMAGE_NAME ${CONTAINER_ARGS:-}" >&2
  container_id="$(docker run ${DOCKER_ARGS:-} --cidfile $cidfile -d "$@" $IMAGE_NAME ${CONTAINER_ARGS:-})"
  [ "${DEBUG:-0}" -eq 1 ] && echo "Created container $container_id"
  return 0
}

function run_change_password_test() {
  local tmpdir=$(mktemp -d)
  mkdir "${tmpdir}/data" && chmod -R a+rwx "${tmpdir}"

  # Create Redis container with persistent volume and set the initial password
  CONTAINER_ARGS="-e REDIS_PASSWORD=foo \
    -v ${tmpdir}:/var/lib/redis/data:Z" \
    ct_create_container "testpass1"

  test_connection testpass1 foo
  docker stop $(ct_get_cid testpass1) >/dev/null

  # Create second container with changed password
  CONTAINER_ARGS="-e REDIS_PASSWORD=bar \
    -v ${tmpdir}:/var/lib/redis/data:Z" \
    ct_create_container "testpass2"

  test_connection testpass2 bar

  # The old password should not work anymore
  container_ip="$(ct_get_cip testpass2)"
  if connection_works "$container_ip" foo ; then
    docker stop $(ct_get_cid testpass2) >/dev/null
    return 1
  fi
  docker stop $(ct_get_cid testpass2) >/dev/null

}

function assert_login_access() {
  local container_ip=$1; shift
  local PASS=$1 ; shift
  local success=$1 ; shift

  if connection_works "$container_ip" "$PASS" ; then
    if $success ; then
      echo "    Connection ($PASS) access granted as expected"
      return
    fi
  else
    if ! $success ; then
      echo "    Connection ($PASS) access denied as expected"
      return
    fi
  fi
  echo "    Connection ($PASS) login assertion failed"
  exit 1
}

function assert_local_access() {
  local id="$1" ; shift
  docker exec $(ct_get_cid "$id") bash -c 'redis-cli ping'
}

# Make sure the invocation of docker run fails.
function assert_container_creation_fails() {

  # Time the docker run command. It should fail. If it doesn't fail,
  # redis will keep running so we kill it with SIGKILL to make sure
  # timeout returns a non-zero value.
  local ret=0
  timeout -s 9 --preserve-status 60s docker run --rm "$@" $IMAGE_NAME >/dev/null || ret=$?

  # Timeout will exit with a high number.
  if [ $ret -gt 10 ]; then
    return 1
  fi
}

function try_image_invalid_combinations() {
  assert_container_creation_fails -e REDIS_PASSWORD="pass with space" "$@"
}

function run_container_creation_tests() {
  echo "  Testing image entrypoint usage"
  try_image_invalid_combinations
  echo "  Success!"
  echo
}

run_doc_test() {
  local tmpdir=$(mktemp -d)
  local f
  echo "  Testing documentation in the container image"
  # Extract the help.1 file from the container
  docker run --rm ${IMAGE_NAME} /bin/bash -c "cat /help.1" >${tmpdir}/help.1
  # Check whether the help.1 file includes some important information
  for term in 6379 "REDIS\_PASSWORD" volume; do
    if ! cat ${tmpdir}/help.1 | grep -F -q -e "${term}" ; then
      echo "ERROR: File /help.1 does not include '${term}'."
      return 1
    fi
  done
  # Check whether the file uses the correct format
  if ! file ${tmpdir}/help.1 | grep -q roff ; then
    echo "ERROR: /help.1 is not in troff or groff format"
    return 1
  fi
  echo "  Success!"
  echo
}

function run_s2i_config_test() {
  echo "testing s2i functionality \n null"
}

function run_tests() {
  local name=$1 ; shift
  envs=${PASS:+"-e REDIS_PASSWORD=$PASS"}
  PASS=${PASS:-}
  CONTAINER_ARGS=${envs} ct_create_container $name
  test_connection "$name" "$PASS"
  echo "  Testing scl usage"
  ct_scl_usage_old $name 'redis-server --version' "$VERSION"
  echo "  Testing login accesses"
  local container_ip
  container_ip=$(ct_get_cip $name)
  assert_login_access "$container_ip" "$PASS" true
  if [ -n "$PASS" ] ; then
    assert_login_access "$container_ip" "${PASS}_foo" false
  fi
  assert_local_access "$name"
  echo "  Success!"
  echo
  test_redis "$container_ip" "$PASS"
}

function run_tests_no_pass() {
  run_tests no_pass
}

function run_tests_pass_no_root() {
  PASS=pass run_tests no_root
}

function run_test_arbitrary_uid_no_pass() {
  CONTAINER_ARGS="-u 12345" run_tests no_pass_altuid
}

function run_test_arbitrary_uid_w_pass() {
  CONTAINER_ARGS="-u 12345" PASS=pass run_tests no_root_altuid
}



# Tests.

## Test whether documentation is part of the image
#run_container_creation_tests
#
## Normal tests without password
#run_tests no_pass
## Normal tests with password
#PASS=pass run_tests no_root
## Test with arbitrary uid for the container without password
#CONTAINER_ARGS="-u 12345" run_tests no_pass_altuid
## Test with arbitrary uid for the container with password
#CONTAINER_ARGS="-u 12345" PASS=pass run_tests no_root_altuid
#
## Test the password change
#run_change_password_test
#
## Test s2i config file extension
#run_s2i_config_test
#
## Test whether documentation is part of the image
#run_doc_test


# Run the chosen tests
TEST_LIST=${@:-$TEST_LIST} ct_run_test_list
